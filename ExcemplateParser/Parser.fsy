{
module Parser
open Syntax
}

%token <string> ID
%token <int> INT
%token <double> DOUBLE
%token <string> STRING
%token <DateTime> DATETIME

%token EQ LBRACKET RBRACKET
%token EOF

%type <SyntaxTree.Statement> statement

%%

statement:
    | ID EQ expression EOF
        {
            { AssignTo = Some($1);
              Expression = $3; }
        }

    | expression EOF
        {
            { AssignTo = None;
              Expression = $1;}
        }

expression:
    | literal { Literal($1) }
    | ID { Variable($1) }
    | ID LBRACKET argumentList RBRACKET { Function($1, $3) }

literal:
    | INT                   { Int($1) }   
    | DOUBLE                { Double($1) } 
    | STRING                { String($1) }
    | DATETIME              { DateTime.Parse($1) }

argumentList:
    | argument { [$1] }
    | argument COMMA argumentList { $1 :: $3 }

argument:
    | ID EQ expression { NamedArgument($1, $3) }
    | expression { OrderedArgument($1) }

$$



