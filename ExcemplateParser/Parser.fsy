%{
open ExcemplateEvaluator.SyntaxTree
%}

%token <string> ID
%token <int> INT
%token <double> DOUBLE
%token <string> STRING

%token EQ LBRACKET RBRACKET COMMA
%token EOF

// Start the context-free grammar.
%start statement
%type <SyntaxTree.Statement> statement

%%
statement:
    | ID EQ expression EOF
        {
            { AssignTo = Some($1);
              Expression = $3; }
        }

    | expression EOF
        {
            { AssignTo = None;
              Expression = $1;}
        }

expression:
    | literal { Value($1) }
    | ID { Var($1) }
    | ID LBRACKET argumentList RBRACKET { Function($1, $3) }

literal:
    | INT                   { Int($1) }   
    | DOUBLE                { Double($1) } 
    | STRING                { String($1) }

argumentList:
    | argument { [$1] }
    | argument COMMA argumentList { $1 :: $3 }

argument:
    | ID EQ expression { NamedArgument($1, $3) }
    | expression { OrderedArgument($1) }

%%



