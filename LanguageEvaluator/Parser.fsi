// Signature file for parser generated by fsyacc
module internal Excemplate.Language.Parser
type token = 
  | EOF
  | EQ
  | LBRACKET
  | RBRACKET
  | COMMA
  | STRING of (string)
  | DOUBLE of (double)
  | INT of (int)
  | ID of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_EQ
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_COMMA
    | TOKEN_STRING
    | TOKEN_DOUBLE
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstatement
    | NONTERM_statement
    | NONTERM_expression
    | NONTERM_literal
    | NONTERM_argumentList
    | NONTERM_argument
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val statement : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (SyntaxTree.Statement) 
