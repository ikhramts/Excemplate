// Implementation file for parser generated by fsyacc
module internal Excemplate.Language.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"

open Excemplate.Language.SyntaxTree

# 10 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | EQ
  | LBRACKET
  | RBRACKET
  | COMMA
  | STRING of (string)
  | DOUBLE of (double)
  | INT of (int)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_EQ
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_COMMA
    | TOKEN_STRING
    | TOKEN_DOUBLE
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstatement
    | NONTERM_statement
    | NONTERM_expression
    | NONTERM_literal
    | NONTERM_argumentList
    | NONTERM_argument

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | EQ  -> 1 
  | LBRACKET  -> 2 
  | RBRACKET  -> 3 
  | COMMA  -> 4 
  | STRING _ -> 5 
  | DOUBLE _ -> 6 
  | INT _ -> 7 
  | ID _ -> 8 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_EQ 
  | 2 -> TOKEN_LBRACKET 
  | 3 -> TOKEN_RBRACKET 
  | 4 -> TOKEN_COMMA 
  | 5 -> TOKEN_STRING 
  | 6 -> TOKEN_DOUBLE 
  | 7 -> TOKEN_INT 
  | 8 -> TOKEN_ID 
  | 11 -> TOKEN_end_of_input
  | 9 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstatement 
    | 1 -> NONTERM_statement 
    | 2 -> NONTERM_statement 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_expression 
    | 5 -> NONTERM_expression 
    | 6 -> NONTERM_expression 
    | 7 -> NONTERM_literal 
    | 8 -> NONTERM_literal 
    | 9 -> NONTERM_literal 
    | 10 -> NONTERM_argumentList 
    | 11 -> NONTERM_argumentList 
    | 12 -> NONTERM_argument 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 11 
let _fsyacc_tagOfErrorTerminal = 9

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | EQ  -> "EQ" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | COMMA  -> "COMMA" 
  | STRING _ -> "STRING" 
  | DOUBLE _ -> "DOUBLE" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOUBLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 6us; 3us; 4us; 21us; 22us; 3us; 65535us; 0us; 8us; 3us; 8us; 21us; 8us; 2us; 65535us; 10us; 11us; 18us; 19us; 2us; 65535us; 10us; 17us; 18us; 17us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 14us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 4us; 1us; 4us; 5us; 6us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 3us; 3us; 4us; 5us; 6us; 2us; 5us; 6us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 2us; 10us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 9us; 11us; 13us; 15us; 17us; 19us; 21us; 25us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 43us; 45us; 47us; 49us; 51us; |]
let _fsyacc_action_rows = 23
let _fsyacc_actionTableElements = [|4us; 32768us; 5us; 16us; 6us; 15us; 7us; 14us; 8us; 2us; 0us; 49152us; 2us; 16388us; 1us; 3us; 2us; 10us; 4us; 32768us; 5us; 16us; 6us; 15us; 7us; 14us; 8us; 9us; 1us; 32768us; 0us; 5us; 0us; 16385us; 1us; 32768us; 0us; 7us; 0us; 16386us; 0us; 16387us; 1us; 16388us; 2us; 10us; 2us; 32768us; 3us; 13us; 8us; 20us; 1us; 32768us; 3us; 12us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 1us; 16394us; 4us; 18us; 1us; 32768us; 8us; 20us; 0us; 16395us; 1us; 32768us; 1us; 21us; 4us; 32768us; 5us; 16us; 6us; 15us; 7us; 14us; 8us; 9us; 0us; 16396us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 9us; 14us; 16us; 17us; 19us; 20us; 21us; 23us; 26us; 28us; 29us; 30us; 31us; 32us; 33us; 35us; 37us; 38us; 40us; 45us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 4us; 2us; 1us; 1us; 4us; 3us; 1us; 1us; 1us; 1us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 16385us; 65535us; 16386us; 16387us; 65535us; 65535us; 65535us; 16389us; 16390us; 16391us; 16392us; 16393us; 65535us; 65535us; 16395us; 65535us; 65535us; 16396us; |]
let _fsyacc_reductions ()  =    [| 
# 130 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : SyntaxTree.Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstatement));
# 139 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                              
                                 { AssignTo = Some(_1);
                                   Expression = _3; }
                             
                   )
# 20 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                 : SyntaxTree.Statement));
# 154 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                              
                                 { AssignTo = None;
                                   Expression = _1;}
                             
                   )
# 26 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                 : SyntaxTree.Statement));
# 168 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                                     Value(_1) 
                   )
# 32 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                 : 'expression));
# 179 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                                Var(_1) 
                   )
# 33 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                 : 'expression));
# 190 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                                                               Function(_1, _3) 
                   )
# 34 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                 : 'expression));
# 202 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                                                  Function(_1, []) 
                   )
# 35 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                 : 'expression));
# 213 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                                                   Int(_1) 
                   )
# 38 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                 : 'literal));
# 224 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                                                   Double(_1) 
                   )
# 39 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                 : 'literal));
# 235 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                                                   String(_1) 
                   )
# 40 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                 : 'literal));
# 246 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argument)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                                      [_1] 
                   )
# 43 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                 : 'argumentList));
# 257 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argument)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                                                         _1 :: _3 
                   )
# 44 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                 : 'argumentList));
# 269 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                                                  NamedArgument(_1, _3) 
                   )
# 46 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fsy"
                 : 'argument));
|]
# 282 "C:\Iouri\Projects\Excemplate\LanguageEvaluator\Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 12;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let statement lexer lexbuf : SyntaxTree.Statement =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
