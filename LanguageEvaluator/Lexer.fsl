{
module internal Excemplate.Language.Lexer

open Microsoft.FSharp.Text.Lexing
open System
open System.Text.RegularExpressions

open Excemplate.Language
open Excemplate.Language.SyntaxTree
open Excemplate.Language.Parser

let lexeme (lexbuf : LexBuffer<char>) = 
    LexBuffer<char>.LexemeString(lexbuf)

let brackets = 
    [   "(", LBRACKET;
        ")", RBRACKET;
    ] |> Map.ofList
        
}

let char = ['a'-'z' 'A'-'Z']
let digit = ['0' - '9']
let quote = '"'
let datetime = digit digit digit digit '-' digit digit '-' digit digit ('T' digit digit ':' digit digit (':' digit digit ('.' digit+)?)?)?
let int = '-'?digit+
let double = '-'?digit*'.'digit+
let identifier = char(char|digit|'_')*
let whitespace = [' ' '\t']
let newline = "\r\n" | '\n' | '\r'
let bracket = '(' | ')'
let eq = '='
let escapedQuote = "\"\"" | "\\\""

rule tokenize = parse
| whitespace { tokenize lexbuf }
| newline { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }
| datetime { let dateTime = 
                try DateTime.Parse(lexeme lexbuf)
                with
                | ex as FormatException -> raise(new InvalidDateException((lexeme lexbuf), ex))
             DATETIME(dateTime) } 
| int { INT(Int32.Parse(lexeme lexbuf)) }
| double { DOUBLE(Double.Parse(lexeme lexbuf)) }
| identifier { ID(lexeme lexbuf) }
| '=' { EQ }
| ',' { COMMA }
| bracket { brackets.[lexeme lexbuf] }
| '"' [^ '"']* '"'  { STRING(let s = lexeme lexbuf in s.Substring(1, s.Length - 2)) }
| eof { EOF }


